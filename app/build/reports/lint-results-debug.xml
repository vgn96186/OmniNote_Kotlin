<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.12.0">

    <issue
        id="ScopedStorage"
        severity="Warning"
        message="The Google Play store has a policy that limits usage of MANAGE_EXTERNAL_STORAGE"
        category="Correctness"
        priority="8"
        summary="Affected by scoped storage"
        explanation="Scoped storage is enforced on Android 10+ (or Android 11+ if using `requestLegacyExternalStorage`). In particular, `WRITE_EXTERNAL_STORAGE` will no longer provide write access to all files; it will provide the equivalent of `READ_EXTERNAL_STORAGE` instead.&#xA;&#xA;As of Android 13, if you need to query or interact with MediaStore or media files on the shared storage, you should be using instead one or more new storage permissions:&#xA;* `android.permission.READ_MEDIA_IMAGES`&#xA;* `android.permission.READ_MEDIA_VIDEO`&#xA;* `android.permission.READ_MEDIA_AUDIO`&#xA;&#xA;and then add `maxSdkVersion=&quot;33&quot;` to the older permission. See the developer guide for how to do this: https://developer.android.com/about/versions/13/behavior-changes-13#granular-media-permissions&#xA;&#xA;The `MANAGE_EXTERNAL_STORAGE` permission can be used to manage all files, but it is rarely necessary and most apps on Google Play are not allowed to use it. Most apps should instead migrate to use scoped storage. To modify or delete files, apps should request write access from the user as described at https://goo.gle/android-mediastore-createwriterequest.&#xA;&#xA;To learn more, read these resources: Play policy: https://goo.gle/policy-storage-help Allowable use cases: https://goo.gle/policy-storage-usecases"
        url="https://goo.gle/android-storage-usecases"
        urls="https://goo.gle/android-storage-usecases"
        errorLine1="    &lt;uses-permission android:name=&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot; />"
        errorLine2="                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/AndroidManifest.xml"
            line="7"
            column="36"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the `android.os.Build.VERSION_CODES` javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application or sdk runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: https://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:&#xA;https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        url="https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        urls="https://developer.android.com/distribute/best-practices/develop/target-sdk.html,https://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdk 34"
        errorLine2="        ~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/build.gradle"
            line="17"
            column="9"/>
    </issue>

    <issue
        id="AndroidGradlePluginVersion"
        severity="Warning"
        message="A newer version of Gradle than 8.14.2 is available: 8.14.3"
        category="Correctness"
        priority="4"
        summary="Obsolete Android Gradle Plugin Version"
        explanation="This detector looks for usage of the Android Gradle Plugin where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.2-bin.zip"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/gradle/wrapper/gradle-wrapper.properties"
            line="3"
            column="17"/>
    </issue>

    <issue
        id="ModifierParameter"
        severity="Warning"
        message="Modifier parameter should be the first optional parameter"
        category="Correctness"
        priority="3"
        summary="Guidelines for Modifier parameters in a Composable function"
        explanation="The first (or only) Modifier parameter in a Composable function should follow the following rules:&#xA;- Be named `modifier`&#xA;- Have a type of `Modifier`&#xA;- Either have no default value, or have a default value of `Modifier`&#xA;- If optional, be the first optional parameter in the parameter list"
        errorLine1="    modifier: Modifier = Modifier"
        errorLine2="    ~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/DrawingCanvas.kt"
            line="33"
            column="5"/>
    </issue>

    <issue
        id="ModifierParameter"
        severity="Warning"
        message="Modifier parameter should be the first optional parameter"
        category="Correctness"
        priority="3"
        summary="Guidelines for Modifier parameters in a Composable function"
        explanation="The first (or only) Modifier parameter in a Composable function should follow the following rules:&#xA;- Be named `modifier`&#xA;- Have a type of `Modifier`&#xA;- Either have no default value, or have a default value of `Modifier`&#xA;- If optional, be the first optional parameter in the parameter list"
        errorLine1="    modifier: Modifier = Modifier"
        errorLine2="    ~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt"
            line="37"
            column="5"/>
    </issue>

    <issue
        id="ModifierParameter"
        severity="Warning"
        message="Modifier parameter should be the first optional parameter"
        category="Correctness"
        priority="3"
        summary="Guidelines for Modifier parameters in a Composable function"
        explanation="The first (or only) Modifier parameter in a Composable function should follow the following rules:&#xA;- Be named `modifier`&#xA;- Have a type of `Modifier`&#xA;- Either have no default value, or have a default value of `Modifier`&#xA;- If optional, be the first optional parameter in the parameter list"
        errorLine1="    modifier: Modifier = Modifier"
        errorLine2="    ~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt"
            line="193"
            column="5"/>
    </issue>

    <issue
        id="ModifierParameter"
        severity="Warning"
        message="Modifier parameter should be the first optional parameter"
        category="Correctness"
        priority="3"
        summary="Guidelines for Modifier parameters in a Composable function"
        explanation="The first (or only) Modifier parameter in a Composable function should follow the following rules:&#xA;- Be named `modifier`&#xA;- Have a type of `Modifier`&#xA;- Either have no default value, or have a default value of `Modifier`&#xA;- If optional, be the first optional parameter in the parameter list"
        errorLine1="    modifier: Modifier = Modifier"
        errorLine2="    ~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt"
            line="263"
            column="5"/>
    </issue>

    <issue
        id="DiscouragedApi"
        severity="Warning"
        message="Fixed screen orientations will be ignored in most cases, starting from Android 16. Android is moving toward a model where apps are expected to adapt to various orientations, display sizes, and aspect ratios."
        category="Correctness"
        priority="2"
        summary="Using discouraged APIs"
        explanation="Discouraged APIs are allowed and are not deprecated, but they may be unfit for common use (e.g. due to slow performance or subtle behavior)."
        errorLine1="            android:screenOrientation=&quot;landscape&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/AndroidManifest.xml"
            line="30"
            column="13"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkClientTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers."
        url="https://goo.gle/TrustAllX509TrustManager"
        urls="https://goo.gle/TrustAllX509TrustManager">
        <location
            file="/home/codespace/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkClientTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers."
        url="https://goo.gle/TrustAllX509TrustManager"
        urls="https://goo.gle/TrustAllX509TrustManager">
        <location
            file="/home/codespace/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkServerTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers."
        url="https://goo.gle/TrustAllX509TrustManager"
        urls="https://goo.gle/TrustAllX509TrustManager">
        <location
            file="/home/codespace/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar"/>
    </issue>

    <issue
        id="KaptUsageInsteadOfKsp"
        severity="Warning"
        message="This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp"
        category="Performance"
        priority="4"
        summary="Kapt usage should be replaced with KSP"
        explanation="KSP is a more efficient replacement for kapt. For libraries that support both, KSP should be used to improve build times."
        url="https://developer.android.com/studio/build/migrate-to-ksp"
        urls="https://developer.android.com/studio/build/migrate-to-ksp"
        errorLine1="    kapt &apos;androidx.room:room-compiler:2.7.2&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/build.gradle"
            line="81"
            column="5"/>
    </issue>

    <issue
        id="KaptUsageInsteadOfKsp"
        severity="Warning"
        message="This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp"
        category="Performance"
        priority="4"
        summary="Kapt usage should be replaced with KSP"
        explanation="KSP is a more efficient replacement for kapt. For libraries that support both, KSP should be used to improve build times."
        url="https://developer.android.com/studio/build/migrate-to-ksp"
        urls="https://developer.android.com/studio/build/migrate-to-ksp"
        errorLine1="    kapt &apos;com.github.bumptech.glide:compiler:4.16.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/build.gradle"
            line="99"
            column="5"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    var scaleFactor by remember { mutableStateOf(1f) } // Consider mutableFloatStateOf for performance"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt"
            line="39"
            column="35"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    var scaleFactor by remember { mutableStateOf(1f) }"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt"
            line="265"
            column="35"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    val scale = remember { mutableStateOf(1f) }"
        errorLine2="                           ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="172"
            column="28"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    val scale = remember { mutableStateOf(1f) }"
        errorLine2="                           ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="202"
            column="28"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    val scale = remember { mutableStateOf(1f) }"
        errorLine2="                           ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="277"
            column="28"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    var strokeWidth by remember { mutableStateOf(4f) }"
        errorLine2="                                  ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="385"
            column="35"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    var strokeOpacity by remember { mutableStateOf(1f) }"
        errorLine2="                                    ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="386"
            column="37"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    val scale = remember { mutableStateOf(1f) }"
        errorLine2="                           ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="560"
            column="28"/>
    </issue>

    <issue
        id="AutoboxingStateCreation"
        severity="Hint"
        message="Prefer `mutableFloatStateOf` instead of `mutableStateOf`"
        category="Performance"
        priority="3"
        summary="`State&lt;T>` will autobox values assigned to this state. Use a specialized state type instead."
        explanation="Calling `mutableStateOf&lt;T>()` when `T` is either backed by a primitive type on the JVM or is a value class results in a state implementation that requires all state values to be boxed. This usually causes an additional allocation for each state write, and adds some additional work to auto-unbox values when reading the value of the state. Instead, prefer to use a specialized primitive state implementation for `Int`, `Long`, `Float`, and `Double` when the state does not need to track null values and does not override the default `SnapshotMutationPolicy`. See `mutableIntStateOf()`, `mutableLongStateOf()`, `mutableFloatStateOf()`, and `mutableDoubleStateOf()` for more information."
        errorLine1="    var scale by remember { mutableStateOf(1f) }"
        errorLine2="                            ~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt"
            line="608"
            column="29"/>
    </issue>

    <issue
        id="MonochromeLauncherIcon"
        severity="Warning"
        message="The application adaptive icon is missing a monochrome tag"
        category="Usability:Icons"
        priority="6"
        summary="Monochrome icon is not defined"
        explanation="If `android:roundIcon` and `android:icon` are both in your manifest, you must either remove the reference to `android:roundIcon` if it is not needed; or, supply the monochrome icon in the drawable defined by the `android:roundIcon` and `android:icon` attribute.&#xA;&#xA;For example, if `android:roundIcon` and `android:icon` are both in the manifest, a launcher might choose to use `android:roundIcon` over `android:icon` to display the adaptive app icon. Therefore, your themed application iconwill not show if your monochrome attribute is not also specified in `android:roundIcon`."
        errorLine1="&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;>"
        errorLine2="^">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml"
            line="2"
            column="1"/>
    </issue>

    <issue
        id="MonochromeLauncherIcon"
        severity="Warning"
        message="The application adaptive roundIcon is missing a monochrome tag"
        category="Usability:Icons"
        priority="6"
        summary="Monochrome icon is not defined"
        explanation="If `android:roundIcon` and `android:icon` are both in your manifest, you must either remove the reference to `android:roundIcon` if it is not needed; or, supply the monochrome icon in the drawable defined by the `android:roundIcon` and `android:icon` attribute.&#xA;&#xA;For example, if `android:roundIcon` and `android:icon` are both in the manifest, a launcher might choose to use `android:roundIcon` over `android:icon` to display the adaptive app icon. Therefore, your themed application iconwill not show if your monochrome attribute is not also specified in `android:roundIcon`."
        errorLine1="&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;>"
        errorLine2="^">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml"
            line="2"
            column="1"/>
    </issue>

    <issue
        id="UnnecessaryRequiredFeature"
        severity="Warning"
        message="Consider whether this feature (`android.hardware.touchscreen`) really is required for the app to function; you can set `android:required=&quot;false&quot;` to indicate that the feature is used but not required"
        category="Usability"
        priority="2"
        summary="Potentially unnecessary required feature"
        explanation="Avoid unnecessarily requiring features that may exclude your app from being served onto devices it might otherwise support.&#xA;&#xA;Consider whether your application can function adequately without restrictive feature requirements by setting these to `android:required=&quot;false&quot;`. By doing so, you can increase the availability of your app to a broader set of devices, including tablets, laptops and cars."
        errorLine1="    &lt;uses-feature android:name=&quot;android.hardware.touchscreen&quot; android:required=&quot;true&quot; />"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/workspaces/OmniNote_Kotlin/app/src/main/AndroidManifest.xml"
            line="11"
            column="33"/>
    </issue>

</issues>
