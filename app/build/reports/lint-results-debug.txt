/workspaces/OmniNote_Kotlin/app/src/main/AndroidManifest.xml:7: Warning: The Google Play store has a policy that limits usage of MANAGE_EXTERNAL_STORAGE [ScopedStorage]
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   As of Android 13, if you need to query or interact with MediaStore or media
   files on the shared storage, you should be using instead one or more new
   storage permissions:
   * android.permission.READ_MEDIA_IMAGES
   * android.permission.READ_MEDIA_VIDEO
   * android.permission.READ_MEDIA_AUDIO

   and then add maxSdkVersion="33" to the older permission. See the developer
   guide for how to do this:
   https://developer.android.com/about/versions/13/behavior-changes-13#granula
   r-media-permissions

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/workspaces/OmniNote_Kotlin/app/build.gradle:17: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 34
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application or sdk runs on a version of Android that is more
   recent than your targetSdkVersion specifies that it has been tested with,
   various compatibility modes kick in. This ensures that your application
   continues to work, but it may look out of place. For example, if the
   targetSdkVersion is less than 14, your app may get an option button in the
   UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/workspaces/OmniNote_Kotlin/gradle/wrapper/gradle-wrapper.properties:3: Warning: A newer version of Gradle than 8.14.2 is available: 8.14.3 [AndroidGradlePluginVersion]
distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.2-bin.zip
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "AndroidGradlePluginVersion":
   This detector looks for usage of the Android Gradle Plugin where the
   version you are using is not the current stable release. Using older
   versions is fine, and there are cases where you deliberately want to stick
   with an older version. However, you may simply not be aware that a more
   recent version is available, and that is what this lint check helps find.

/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/DrawingCanvas.kt:33: Warning: Modifier parameter should be the first optional parameter [ModifierParameter from androidx.compose.ui]
    modifier: Modifier = Modifier
    ~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt:37: Warning: Modifier parameter should be the first optional parameter [ModifierParameter from androidx.compose.ui]
    modifier: Modifier = Modifier
    ~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt:193: Warning: Modifier parameter should be the first optional parameter [ModifierParameter from androidx.compose.ui]
    modifier: Modifier = Modifier
    ~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt:263: Warning: Modifier parameter should be the first optional parameter [ModifierParameter from androidx.compose.ui]
    modifier: Modifier = Modifier
    ~~~~~~~~

   Explanation for issues of type "ModifierParameter":
   The first (or only) Modifier parameter in a Composable function should
   follow the following rules:
   - Be named modifier
   - Have a type of Modifier
   - Either have no default value, or have a default value of Modifier
   - If optional, be the first optional parameter in the parameter list

   Vendor: Jetpack Compose
   Identifier: androidx.compose.ui
   Feedback: https://issuetracker.google.com/issues/new?component=612128

/workspaces/OmniNote_Kotlin/app/src/main/AndroidManifest.xml:30: Warning: Fixed screen orientations will be ignored in most cases, starting from Android 16. Android is moving toward a model where apps are expected to adapt to various orientations, display sizes, and aspect ratios. [DiscouragedApi]
            android:screenOrientation="landscape"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DiscouragedApi":
   Discouraged APIs are allowed and are not deprecated, but they may be unfit
   for common use (e.g. due to slow performance or subtle behavior).

/home/codespace/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar: Warning: checkClientTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers [TrustAllX509TrustManager]
/home/codespace/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar: Warning: checkClientTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers [TrustAllX509TrustManager]
/home/codespace/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar: Warning: checkServerTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers [TrustAllX509TrustManager]

   Explanation for issues of type "TrustAllX509TrustManager":
   This check looks for X509TrustManager implementations whose
   checkServerTrusted or checkClientTrusted methods do nothing (thus trusting
   any certificate chain) which could result in insecure network traffic
   caused by trusting arbitrary TLS/SSL certificates presented by peers.

   https://goo.gle/TrustAllX509TrustManager

/workspaces/OmniNote_Kotlin/app/build.gradle:81: Warning: This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp [KaptUsageInsteadOfKsp]
    kapt 'androidx.room:room-compiler:2.7.2'
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/build.gradle:99: Warning: This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp [KaptUsageInsteadOfKsp]
    kapt 'com.github.bumptech.glide:compiler:4.16.0'
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "KaptUsageInsteadOfKsp":
   KSP is a more efficient replacement for kapt. For libraries that support
   both, KSP should be used to improve build times.

   https://developer.android.com/studio/build/migrate-to-ksp

/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt:39: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var scaleFactor by remember { mutableStateOf(1f) } // Consider mutableFloatStateOf for performance
                                  ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/components/KnowledgeGraph.kt:265: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var scaleFactor by remember { mutableStateOf(1f) }
                                  ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:172: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    val scale = remember { mutableStateOf(1f) }
                           ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:202: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    val scale = remember { mutableStateOf(1f) }
                           ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:277: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    val scale = remember { mutableStateOf(1f) }
                           ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:385: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var strokeWidth by remember { mutableStateOf(4f) }
                                  ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:386: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var strokeOpacity by remember { mutableStateOf(1f) }
                                    ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:560: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    val scale = remember { mutableStateOf(1f) }
                           ~~~~~~~~~~~~~~
/workspaces/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:608: Hint: Prefer mutableFloatStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var scale by remember { mutableStateOf(1f) }
                            ~~~~~~~~~~~~~~

   Explanation for issues of type "AutoboxingStateCreation":
   Calling mutableStateOf<T>() when T is either backed by a primitive type on
   the JVM or is a value class results in a state implementation that requires
   all state values to be boxed. This usually causes an additional allocation
   for each state write, and adds some additional work to auto-unbox values
   when reading the value of the state. Instead, prefer to use a specialized
   primitive state implementation for Int, Long, Float, and Double when the
   state does not need to track null values and does not override the default
   SnapshotMutationPolicy. See mutableIntStateOf(), mutableLongStateOf(),
   mutableFloatStateOf(), and mutableDoubleStateOf() for more information.

   Vendor: Jetpack Compose
   Identifier: androidx.compose.runtime
   Feedback: https://issuetracker.google.com/issues/new?component=612128

/workspaces/OmniNote_Kotlin/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
/workspaces/OmniNote_Kotlin/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml:2: Warning: The application adaptive roundIcon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/workspaces/OmniNote_Kotlin/app/src/main/AndroidManifest.xml:11: Warning: Consider whether this feature (android.hardware.touchscreen) really is required for the app to function; you can set android:required="false" to indicate that the feature is used but not required [UnnecessaryRequiredFeature]
    <uses-feature android:name="android.hardware.touchscreen" android:required="true" />
                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnnecessaryRequiredFeature":
   Avoid unnecessarily requiring features that may exclude your app from being
   served onto devices it might otherwise support.

   Consider whether your application can function adequately without
   restrictive feature requirements by setting these to
   android:required="false". By doing so, you can increase the availability of
   your app to a broader set of devices, including tablets, laptops and cars.

0 errors, 16 warnings, 9 hints
