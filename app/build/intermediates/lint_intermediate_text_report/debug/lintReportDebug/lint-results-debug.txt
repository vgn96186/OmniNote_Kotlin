/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/AndroidManifest.xml:7: Warning: The Google Play store has a policy that limits usage of MANAGE_EXTERNAL_STORAGE [ScopedStorage]
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   As of Android 13, if you need to query or interact with MediaStore or media
   files on the shared storage, you should be using instead one or more new
   storage permissions:
   * android.permission.READ_MEDIA_IMAGES
   * android.permission.READ_MEDIA_VIDEO
   * android.permission.READ_MEDIA_AUDIO

   and then add maxSdkVersion="33" to the older permission. See the developer
   guide for how to do this:
   https://developer.android.com/about/versions/13/behavior-changes-13#granula
   r-media-permissions

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/build.gradle:17: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 34
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application or sdk runs on a version of Android that is more
   recent than your targetSdkVersion specifies that it has been tested with,
   various compatibility modes kick in. This ensures that your application
   continues to work, but it may look out of place. For example, if the
   targetSdkVersion is less than 14, your app may get an option button in the
   UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/build.gradle:63: Warning: A newer version of androidx.core:core-ktx than 1.16.0 is available: 1.17.0 [GradleDependency]
    implementation 'androidx.core:core-ktx:1.16.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/build.gradle:90: Warning: A newer version of androidx.datastore:datastore-preferences than 1.0.0 is available: 1.1.7 [GradleDependency]
    implementation "androidx.datastore:datastore-preferences:1.0.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/build.gradle:124: Warning: A newer version of androidx.compose.ui:ui-test-manifest than 1.8.3 is available: 1.9.0 [GradleDependency]
    debugImplementation "androidx.compose.ui:ui-test-manifest:${compose_version}"
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/java/com/example/omninote/ui/screens/MainScreen.kt:46: Warning: Using Configuration.screenWidthDp instead of LocalWindowInfo.current.containerSize [ConfigurationScreenWidthHeight from androidx.compose.ui]
            val isCompact = configuration.screenWidthDp < 840
                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ConfigurationScreenWidthHeight":
   Configuration.screenWidthDp and Configuration.screenHeightDp have different
   insets behaviour depending on target SDK version, and are rounded to the
   nearest Dp. This means that using these values in composition to size a
   layout can result in issues, as these values do not accurately represent
   the actual available window size. Instead it is recommended to use
   WindowInfo.containerSize which accurately represents the window size.

   Vendor: Jetpack Compose
   Identifier: androidx.compose.ui
   Feedback: https://issuetracker.google.com/issues/new?component=612128

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/AndroidManifest.xml:30: Warning: Fixed screen orientations will be ignored in most cases, starting from Android 16. Android is moving toward a model where apps are expected to adapt to various orientations, display sizes, and aspect ratios. [DiscouragedApi]
            android:screenOrientation="landscape"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DiscouragedApi":
   Discouraged APIs are allowed and are not deprecated, but they may be unfit
   for common use (e.g. due to slow performance or subtle behavior).

/Users/vishnugnair/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar: Warning: checkClientTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers [TrustAllX509TrustManager]
/Users/vishnugnair/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar: Warning: checkClientTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers [TrustAllX509TrustManager]
/Users/vishnugnair/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15to18/1.72/32faf4d74dbc333fb3a7a6c80c30417cf888fc7a/bcpkix-jdk15to18-1.72.jar: Warning: checkServerTrusted is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers [TrustAllX509TrustManager]

   Explanation for issues of type "TrustAllX509TrustManager":
   This check looks for X509TrustManager implementations whose
   checkServerTrusted or checkClientTrusted methods do nothing (thus trusting
   any certificate chain) which could result in insecure network traffic
   caused by trusting arbitrary TLS/SSL certificates presented by peers.

   https://goo.gle/TrustAllX509TrustManager

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/build.gradle:82: Warning: This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp [KaptUsageInsteadOfKsp]
    kapt 'androidx.room:room-compiler:2.7.2'
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/build.gradle:103: Warning: This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp [KaptUsageInsteadOfKsp]
    kapt 'com.github.bumptech.glide:compiler:4.16.0'
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "KaptUsageInsteadOfKsp":
   KSP is a more efficient replacement for kapt. For libraries that support
   both, KSP should be used to improve build times.

   https://developer.android.com/studio/build/migrate-to-ksp

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/res/drawable/ic_eraser.xml:1: Warning: The resource R.drawable.ic_eraser appears to be unused [UnusedResources]
<vector xmlns:android="http://schemas.android.com/apk/res/android"
^

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

   Available options:

   **skip-libraries** (default is true):
   Whether the unused resource check should skip reporting unused resources in libraries.

   Many libraries will declare resources that are part of the library surface; other modules depending on the library will also reference the resources. To avoid reporting all these resources as unused (in the context of a library), the unused resource check normally skips reporting unused resources in libraries. Instead, run the unused resource check on the consuming app module (along with `checkDependencies=true`).

   However, there are cases where you want to check that all the resources declared in a library are used; in that case, you can disable the skip option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UnusedResources">
           <option name="skip-libraries" value="true" />
       </issue>
   </lint>
   ```

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml:2: Warning: The application adaptive roundIcon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/Users/vishnugnair/Downloads/OmniNote_Kotlin/OmniNote_Kotlin/app/src/main/AndroidManifest.xml:11: Warning: Consider whether this feature (android.hardware.touchscreen) really is required for the app to function; you can set android:required="false" to indicate that the feature is used but not required [UnnecessaryRequiredFeature]
    <uses-feature android:name="android.hardware.touchscreen" android:required="true" />
                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnnecessaryRequiredFeature":
   Avoid unnecessarily requiring features that may exclude your app from being
   served onto devices it might otherwise support.

   Consider whether your application can function adequately without
   restrictive feature requirements by setting these to
   android:required="false". By doing so, you can increase the availability of
   your app to a broader set of devices, including tablets, laptops and cars.

0 errors, 16 warnings
